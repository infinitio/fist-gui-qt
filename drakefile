import os
import drake
import drake.cxx
from drake import Node
import drake.git
import drake.nsis
import drake.cxx.qt
import drake.templating

from functools import partial

build = None
tests = None
install = None
check = None

with open(str(drake.path_source('../elle/drake-utils.py')), 'r') as f:
  exec(f.read(), globals(), globals())

def architecture_dictionary(cxx_toolkit):
  if cxx_toolkit.architecture == drake.architecture.x86_64:
    return {"architecture": "64"}
  elif cxx_toolkit.architecture == drake.architecture.x86:
    return {"architecture": "32"}
  else:
    raise Exception("unknown architecture: %s" % cxx_toolkit.architecture)

Node.extensions['def'] = drake.cxx.Object

def configure(cxx_toolkit = None,
              cxx_config = drake.cxx.Config(),
              prefix = drake.Path('/usr/local'),
              fist_production_build = False,
              boost = None,
              git = None,
              elle = None,
              qt = None,
              openssl_include_dir = '/usr',
              openssl_libraries = [],
              libraries = []):

  def copy_lib(lib, where = 'lib'):
    if isinstance(lib, drake.cxx.StaticLib):
      return lib
    else:
      return drake.copy(lib, where, True)

  global build, check, tests, installer, config, toolkit

  prefix = drake.Path(prefix)
  cxx_config = drake.cxx.Config(cxx_config)
  cxx_toolkit = cxx_toolkit or drake.cxx.Toolkit()
  git = git or drake.git.Git(path = drake.path_source('..'))
  dynamic_libraries = []
  libraries = [copy_lib(lib) for lib in libraries]
  openssl_libraries = [copy_lib(lib) for lib in openssl_libraries]
  for lib in libraries + openssl_libraries:
    if isinstance(lib, drake.cxx.DynLib):
      dynamic_libraries.append(lib)

  if fist_production_build:
    cxx_config.define('FIST_PRODUCTION_BUILD')
  cxx_config.lib_path_runtime('../lib')
  cxx_config.add_local_include_path('src')

  #
  # Boost configurations
  #
  if cxx_toolkit.os in (drake.os.macos, drake.os.windows, drake.os.ios):
    boost_filesystem = drake.cxx.Config(boost.config_filesystem(static = True))
  else:
    boost_filesystem = drake.cxx.Config(boost.config_filesystem(link = False))
    boost_filesystem.library_add(copy_lib(boost.filesystem_dynamic))
  if cxx_toolkit.os in [drake.os.windows, drake.os.ios]:
    boost_system = drake.cxx.Config(boost.config_system(static = True))
    boost_program_options = drake.cxx.Config(boost.config_program_options(static = True))
  else:
    boost_system = drake.cxx.Config(boost.config_system(link = False))
    boost_system.library_add(copy_lib(boost.system_dynamic))
    boost_program_options = drake.cxx.Config(boost.config_program_options(link = False))
    boost_program_options.library_add(copy_lib(boost.program_options_dynamic))

  #
  # Qt configuration.
  #
  qt_cxx_config = drake.cxx.Config(cxx_config)
  if qt is not None:
    qt = drake.cxx.qt.Qt(
      cxx_toolkit = cxx_toolkit,
      prefix = qt,
      version_effective = drake.Version(4, 8, 0),
      prefer_shared = True,
    )
  else:
    openssl_lib_dirs = drake.path_build('.', absolute = True) / 'lib'
    Qt_version = drake.Version(4, 8, 6)
    Qt_short_version = (Qt_version.major, Qt_version.minor)
    Qt_basename = 'qt-everywhere-opensource-src-%s' % Qt_version
    Qt_tarball = drake.node('Qt/%s.tar.gz' % Qt_basename)
    Qt_prefix = drake.Path('Qt')
    Qt_build = Qt_prefix / Qt_basename
    Qt_configure = drake.node(Qt_build / 'configure')
    # This url does not work due to Apache messing up with content-type headers:
    # Qt_url = 'http://Qt.net/%s.tar.gz' % Qt_basename
    Qt_url = 'http://download.qt-project.org/official_releases/qt/%(short_version)s/%(version)s/qt-everywhere-opensource-src-%(version)s.tar.gz' % {
      'short_version': "%s.%s" % Qt_short_version,
      'version': Qt_version,
    }
    drake.HTTPDownload(
      Qt_url,
      Qt_tarball,
      fingerprint = '2edbe4d6c2eff33ef91732602f3518eb',
    )
    drake.TarballExtractor(
      Qt_tarball,
      targets = ['%s/%s' % (Qt_basename, 'configure')],
      patches = ((drake.node('qt.patch'), 1),),
    )
    Qt_configure_call = Qt_configure
    Qt_images_plugins = [
      'gif', 'jpeg', 'ico',
    ]
    Qt_removed_images_plugins = set(drake.cxx.qt.Qt.imageformats) - set(Qt_images_plugins)
    Qt_configure_args = [
      '-shared', '-release', '-no-sql-sqlite',
      '-no-opengl', '-opensource', '-confirm-license', '-nomake', 'demos',
      '-fast', '-nomake', 'examples', '-nomake', 'tests', '-openssl',
      '-I%s' % openssl_include_dir,
      '-L%s' % openssl_lib_dirs
    ] + ["-no-%s" % plugin for plugin in Qt_removed_images_plugins]
    Qt_env = {
      'OPENSSL_LIBS': '-lssl -lcrypto -L%s' % openssl_lib_dirs
    }
    if cxx_toolkit.os == drake.os.windows:
      Qt_env['OPENSSL_LIBS'] += ' -lws2_32 -lgdi32 -lcrypt32'
    Qt_libs = [
      'Qt3Support', 'QtCore', 'QtDeclarative', 'QtGui',
      'QtMultimedia', 'QtNetwork', 'QtWebKit', 'QtXml',
      'QtXmlPatterns']
    if cxx_toolkit.os == drake.os.windows:
      Qt_configure_args += [
        '-xplatform', 'win32-g++', '-device-option',
        'CROSS_COMPILE=%s' % cxx_toolkit.prefix]
      Qt_libs = [drake.cxx.DynLib('Qt/lib/%s%s.dll' % (x, Qt_version.major))
                 for x in Qt_libs]
      Qt_images_plugins = [drake.cxx.DynLib('Qt/plugins/imageformats/q%s%s.dll' % (x, Qt_version.major))
                           for x in Qt_images_plugins]
    elif cxx_toolkit.os == drake.os.linux:
      Qt_libs = [drake.cxx.DynLib('Qt/lib/lib%s.so' % x) for x in Qt_libs]
      Qt_images_plugins = [drake.cxx.DynLib('Qt/plugins/imageformats/libq%s.so' % x) for x in Qt_images_plugins]
    Qt_prefix_absolute = drake.path_build(Qt_prefix, absolute = True)
    Qt_args = []
    Qt_args.append("PREFIX=%s" % cxx_toolkit.prefix)
    Qt_targets = Qt_libs + \
                 Qt_images_plugins + \
                 drake.nodes(*(map(lambda x: 'Qt/include/' + x, drake.cxx.qt.per_version_headers[4])))
    GNUBuilder(
      cxx_toolkit,
      configure = Qt_configure_call,
      configure_args = [
        '--prefix=%s' % Qt_prefix_absolute,
      ] + Qt_configure_args,
      additional_env = Qt_env,
      working_directory = drake.path_build(Qt_build),
      targets = Qt_targets,
      sources = [Qt_configure] + openssl_libraries,
      build_args = ['sub-src', 'install'] + list(s.replace('\\', '/') for s in Qt_args)
    )
    Qt_config = drake.cxx.Config()
    Qt_config.add_local_include_path('Qt/include')
    Qt_config.lib_path_runtime('Qt/lib')
    qt_rules = drake.Rule('Qt')
    qt_rules << Qt_libs
    qt_cxx_config += Qt_config
    qt = drake.cxx.qt.Qt(
      cxx_toolkit = cxx_toolkit,
      prefix = Qt_prefix_absolute,
      version_effective = Qt_version,
      prefer_shared = True,
    )
  # Qt use file generation tools, which create function with
  # missing declaration.
  qt_cxx_config.warnings.missing_declarations = None
  qt_cxx_config += qt.config()
  for l in ['core', 'gui', 'network', 'webkit']:
    qt_cxx_config += getattr(qt, 'config_' + l)(static = False)
    lib = getattr(qt, l + '_dynamic')
    lib = copy_lib(lib)
    qt_cxx_config.library_add(lib)
    dynamic_libraries += [lib]
  qt_cxx_config += boost_filesystem
  qt_cxx_config += boost_system
  qt_cxx_config += boost_program_options

  # Windows specific libraries.
  # XXX: Maybe some clean could be made.
  if cxx_toolkit.os == drake.os.windows:
    windows_cxx_config = drake.cxx.Config()
    windows_cxx_config.lib('shlwapi')
    windows_cxx_config.lib('ws2_32')
    windows_cxx_config.lib('gdi32')
    windows_cxx_config.lib('mswsock')
    windows_cxx_config.lib('uuid')
    windows_cxx_config.lib('ole32')
    windows_cxx_config.lib('winmm')
    windows_cxx_config.lib('oleaut32')
    windows_cxx_config.lib('z')
    windows_cxx_config.lib('comdlg32')
    windows_cxx_config.lib('imm32')
    windows_cxx_config.lib('winspool')
    windows_cxx_config.lib('shell32')
    windows_cxx_config.lib('kernel32')
    # Remove the command line windows on qt.
    windows_cxx_config.flag("-Wl,-subsystem,windows")
    qt_cxx_config += windows_cxx_config

  with drake.templating.Context(architecture_dictionary(cxx_toolkit)):
    sources = drake.nodes(
      "resources/fist-gui-qt/resources.qrc",
      "src/fist-gui-qt/AvatarIcon.cc",
      "src/fist-gui-qt/AvatarIcon.hh",
      "src/fist-gui-qt/AvatarWidget.cc",
      "src/fist-gui-qt/AvatarWidget.hh",
      "src/fist-gui-qt/FileItem.cc",
      "src/fist-gui-qt/FileItem.hh",
      "src/fist-gui-qt/Fist.cc.tmpl",
      "src/fist-gui-qt/Fist.hh",
      "src/fist-gui-qt/Footer.cc",
      "src/fist-gui-qt/Footer.hh",
      "src/fist-gui-qt/HorizontalSeparator.cc",
      "src/fist-gui-qt/HorizontalSeparator.hh",
      "src/fist-gui-qt/IconButton.cc",
      "src/fist-gui-qt/IconButton.hh",
      "src/fist-gui-qt/InfinitDock.cc",
      "src/fist-gui-qt/InfinitDock.hh",
      "src/fist-gui-qt/ListItem.cc",
      "src/fist-gui-qt/ListItem.hh",
      "src/fist-gui-qt/ListWidget.cc",
      "src/fist-gui-qt/ListWidget.hh",

      # Login.
      "src/fist-gui-qt/login/Window.cc",
      "src/fist-gui-qt/login/Window.hh",
      "src/fist-gui-qt/login/facebook/ConnectWindow.hh",
      "src/fist-gui-qt/login/facebook/ConnectWindow.cc",

      "src/fist-gui-qt/Panel.cc",
      "src/fist-gui-qt/Panel.hh",
      "src/fist-gui-qt/RoundButton.cc",
      "src/fist-gui-qt/RoundButton.hh",
      "src/fist-gui-qt/RoundShadowWidget.cc",
      "src/fist-gui-qt/RoundShadowWidget.hh",
      "src/fist-gui-qt/SearchField.cc",
      "src/fist-gui-qt/SearchField.hh",
      "src/fist-gui-qt/ShapeButton.cc",
      "src/fist-gui-qt/ShapeButton.hh",
      "src/fist-gui-qt/SmoothLayout.cc",
      "src/fist-gui-qt/SmoothLayout.hh",
      "src/fist-gui-qt/SmoothScrollBar.cc",
      "src/fist-gui-qt/SmoothScrollBar.hh",
      "src/fist-gui-qt/TextListItem.cc",
      "src/fist-gui-qt/TextListItem.hh",
      "src/fist-gui-qt/gui/Tooltip.cc",
      "src/fist-gui-qt/gui/Tooltip.hh",
      "src/fist-gui-qt/TransactionFooter.cc",
      "src/fist-gui-qt/TransactionFooter.hh",
      "src/fist-gui-qt/TransactionPanel.cc",
      "src/fist-gui-qt/TransactionPanel.hh",
      "src/fist-gui-qt/TransactionWidget.cc",
      "src/fist-gui-qt/TransactionWidget.hh",
      "src/fist-gui-qt/TransactionWindow.cc",
      "src/fist-gui-qt/TransactionWindow.hh",
      "src/fist-gui-qt/UserWidget.cc",
      "src/fist-gui-qt/UserWidget.hh",
      "src/fist-gui-qt/globals.hh",
      "src/fist-gui-qt/Settings.cc",
      "src/fist-gui-qt/Settings.hh",
      "src/fist-gui-qt/ModeSelector.cc",
      "src/fist-gui-qt/ModeSelector.hh",

      "src/fist-gui-qt/SystrayMessage.hh",
      "src/fist-gui-qt/SystrayMessage.cc",

      "src/fist-gui-qt/Updater.hh",
      "src/fist-gui-qt/Updater.cc",
      "src/fist-gui-qt/LoadingDialog.hh",
      "src/fist-gui-qt/LoadingDialog.cc",

      "src/fist-gui-qt/log/Selector.cc",
      "src/fist-gui-qt/log/Selector.hh",
      "src/fist-gui-qt/log/CircularSelector.cc",
      "src/fist-gui-qt/log/CircularSelector.hh",
      "src/fist-gui-qt/main.cc",

      "src/fist-gui-qt/onboarding/Onboarder.hh",
      "src/fist-gui-qt/onboarding/Onboarder.cc",

      # Models.
      "src/fist-gui-qt/model/Model.cc",
      "src/fist-gui-qt/model/Model.hh",
      "src/fist-gui-qt/model/Model.hxx",
      "src/fist-gui-qt/model/Transaction.cc",
      "src/fist-gui-qt/model/Transaction.hh",
      "src/fist-gui-qt/model/Transaction.hxx",
      "src/fist-gui-qt/model/User.cc",
      "src/fist-gui-qt/model/User.hh",
      "src/fist-gui-qt/model/User.hxx",
      "src/fist-gui-qt/model/Link.cc",
      "src/fist-gui-qt/model/Link.hh",
      "src/fist-gui-qt/model/Device.cc",
      "src/fist-gui-qt/model/Device.hh",

      "src/fist-gui-qt/gui/GrowingArea.cc",
      "src/fist-gui-qt/gui/GrowingArea.hh",

      "src/fist-gui-qt/gui/TabWidget.cc",
      "src/fist-gui-qt/gui/TabWidget.hh",
      "src/fist-gui-qt/gui/Tab.cc",
      "src/fist-gui-qt/gui/Tab.hh",
      "src/fist-gui-qt/gui/IconProvider.cc",
      "src/fist-gui-qt/gui/IconProvider.hh",
      "src/fist-gui-qt/gui/IconProvider/known.hh",

      "src/fist-gui-qt/gui/ImageSerie.cc",
      "src/fist-gui-qt/gui/ImageSerie.hh",
      "src/fist-gui-qt/gui/SystemTrayIcon.hh",
      "src/fist-gui-qt/gui/SystemTrayIcon.cc",

      "src/fist-gui-qt/State.hh",
      "src/fist-gui-qt/State.cc",

      "src/fist-gui-qt/TwoStateIconButton.hh",
      "src/fist-gui-qt/TwoStateIconButton.cc",

      "src/fist-gui-qt/SendView/Panel.hh",
      "src/fist-gui-qt/SendView/Panel.cc",
      "src/fist-gui-qt/SendView/Footer.cc",
      "src/fist-gui-qt/SendView/Footer.hh",
      "src/fist-gui-qt/SendView/Files.cc",
      "src/fist-gui-qt/SendView/Files.hh",
      "src/fist-gui-qt/SendView/Users.cc",
      "src/fist-gui-qt/SendView/Users.hh",
      "src/fist-gui-qt/SendView/Message.cc",
      "src/fist-gui-qt/SendView/Message.hh",
      "src/fist-gui-qt/SendView/NoSearchResultWidget.cc",
      "src/fist-gui-qt/SendView/NoSearchResultWidget.hh",
      "src/fist-gui-qt/SendView/SearchResultWidget.cc",
      "src/fist-gui-qt/SendView/SearchResultWidget.hh",
      "src/fist-gui-qt/SendView/OwnDeviceSearchResult.cc",
      "src/fist-gui-qt/SendView/OwnDeviceSearchResult.hh",
      "src/fist-gui-qt/SendView/FileAdder.cc",
      "src/fist-gui-qt/SendView/FileAdder.hh",

      "src/fist-gui-qt/MainView/Transactions.cc",
      "src/fist-gui-qt/MainView/Transactions.hh",
      "src/fist-gui-qt/MainView/Links.hh",
      "src/fist-gui-qt/MainView/Links.cc",
      "src/fist-gui-qt/MainView/LinkWidget.cc",
      "src/fist-gui-qt/MainView/LinkWidget.hh",

      # Notifications.
      "src/fist-gui-qt/notification/Notification.cc",
      "src/fist-gui-qt/notification/Notification.hh",
      "src/fist-gui-qt/notification/Center.cc",
      "src/fist-gui-qt/notification/Center.hh",

      "src/fist-gui-qt/notification/LinkReady.cc",
      "src/fist-gui-qt/notification/LinkReady.hh",
      "src/fist-gui-qt/notification/IncomingTransaction.cc",
      "src/fist-gui-qt/notification/IncomingTransaction.hh",
      "src/fist-gui-qt/notification/UpdateAvailable.cc",
      "src/fist-gui-qt/notification/UpdateAvailable.hh",
      "src/fist-gui-qt/notification/Minimized.cc",
      "src/fist-gui-qt/notification/Minimized.hh",

      # Popups.
      "src/fist-gui-qt/popup/NoMoreStorage.cc",
      "src/fist-gui-qt/popup/NoMoreStorage.hh",

      "src/fist-gui-qt/GhostCode/Panel.cc",
      "src/fist-gui-qt/GhostCode/Panel.hh",
      "src/fist-gui-qt/GhostCode/Footer.cc",
      "src/fist-gui-qt/GhostCode/Footer.hh",
    )

  build = drake.Rule('build')
  test = drake.Rule('test')
  check = drake.Rule('check')

  application = drake.cxx.Executable(
    'bin/Infinit',
    sources + libraries,
    cxx_toolkit,
    qt_cxx_config,
    strip = True)

  build << application

  if cxx_toolkit.os == drake.os.windows:
    # Here is the trick.
    shell_extensions = []
    for version, toolkit in [
        ('32', drake.cxx.GccToolkit(compiler = os.getenv('CXX', 'i686-w64-mingw32-g++'))),
        ('64', drake.cxx.GccToolkit(compiler = os.getenv('CXX', 'x86_64-w64-mingw32-g++')))
      ]:

      dll_cxx_config = drake.cxx.Config(cxx_config)
      dll_cxx_config.lib('uuid')
      dll_cxx_config.lib('ole32')
      dll_cxx_config.define("_WIN32_WINNT=0x0600")
      dll_cxx_config.define("ELLE_LOG_DISABLE")
      dll_cxx_config.flag("-Wl,-subsystem,windows")
      resource = drake.cxx.ResourceFile('src/contextual/resources.rc')
      resource.dependency_add(drake.Node('resources/contextual/infinit.bmp'))
      resource.dependency_add(drake.Node('resources/contextual/infinit.ico'))

      minimal_elle_sources = drake.nodes(
        '../elle/elle/src/elle/Backtrace.cc',
        '../elle/elle/src/elle/Exception.cc',
        '../elle/elle/src/elle/Printable.cc',
        '../elle/elle/src/elle/assert.cc',
        '../elle/elle/src/elle/finally.cc',
        '../elle/elle/src/elle/os/environ.cc',
        '../elle/elle/src/elle/os/exceptions.cc',
        '../elle/elle/src/elle/system/Process.cc',
        '../elle/elle/src/elle/system/getpid.cc',
      )
      minimal_elle_sources = drake.copy(minimal_elle_sources,
                                        'mini_elle_%s' % version,
                                        strip_prefix = True)

      shell_extension_sources = drake.nodes(
        'src/contextual/helpers.cc',
        'src/contextual/Handler.cc',
        'src/contextual/HandlerFactory.cc',
        'src/contextual/Server.cc',
        'src/contextual/bitmap.cpp',
      ) + [resource]

      shell_extension_sources = drake.copy(
        shell_extension_sources,
        'shellex_%s' % version,
        strip_prefix = True)

      minimal_elle = drake.cxx.StaticLib(
        'lib/minelle%s' % version,
        minimal_elle_sources,
        toolkit,
        dll_cxx_config)

      shell_extension = shell_extension_sources + drake.nodes(
        # Icon.
        'src/contextual/resources.hh',

        # Rename some symboles.
        'src/contextual/libcontextual.def'
      )

      shellextension = drake.cxx.DynLib(
        'lib/contextual%s' % version,
        shell_extension + [minimal_elle],
        toolkit,
        dll_cxx_config,
        strip = True)
      shell_extensions.append(shellextension)
      build << shellextension

    for name in [
        "string_conversion",
        "GUID",
      ]:
      test << drake.cxx.Executable(
        'tests/contextual/%s.cc' % name,
        [
          drake.node('tests/contextual/%s.cc' % name),
        ],
        cxx_toolkit,
        cxx_config)

    ## ------------ ##
    ## Osslsigncode ##
    ## ------------ ##
    ## Osslsigncode is a tool to sign executables.
    osslsigncode_prefix = drake.path_build('osslsigncode')
    osslsigncode_configure = drake.node('osslsigncode/configure')
    osslsigncode_autogen = drake.node('osslsigncode/autogen.sh')
    # class OsslsigncodeConfigureChecker(drake.Builder):
    #
    #   def __init__(self,
    #                osslsigncode_autogen,
    #                osslsigncode_configure):
    #     self.__autogen = osslsigncode_autogen
    #     self.__configure = osslsigncode_configure
    #     super().__init__([self.__autogen], [self.__configure])
    #
    #   def execute(self):
    #     # if not self.__configure.path().exists():
    #     #   print(self.__configure.path())
    #     #   raise BaseException("please run %s" % self.__autogen)
    #     return True
    #
    #   @property
    #   def target(self):
    #     return self.targets()[0]
    #
    # osslsigncode_configure = OsslsigncodeConfigureChecker(
    #   osslsigncode_autogen,
    #   osslsigncode_configure).target

    osslsigncode_prefix_absolute = drake.path_root() / osslsigncode_prefix
    osslsigncode = drake.node('osslsigncode/bin/osslsigncode')
    GNUBuilder(
      cxx_toolkit,
      configure = osslsigncode_configure,
      configure_args = [
        '--prefix=%s' % osslsigncode_prefix_absolute,
        # Use our own openssl &  curl.
      ],
      targets = [osslsigncode], # osslsigncode_configure
      sources = [osslsigncode_configure,
                 drake.node('osslsigncode/osslsigncode.c')],
    )

    signer = drake.Rule('signer')
    signer << osslsigncode

    class Signer(drake.Builder):

      def __init__(self, source, to):
        """Create a signer.

        source -- Node to sign.
        to     -- Destination path.
        """
        self.__source = source
        self.__target = source.clone(to.canonize())
        self.__cetificate = drake.Node('resources/authenticode.spc')
        self.__key = drake.Node('resources/authenticode.key')
        drake.Builder.__init__(self,
                               [self.__source, osslsigncode],
                               [self.__target])

      @property
      def command(self):
        return [str(osslsigncode.path()),
                '-spc', str(self.__cetificate.path()),
                '-key', str(self.__key.path()),
                '-t', 'http://timestamp.verisign.com/scripts/timstamp.dll',
                '-in', str(self.__source.path()),
                '-out', str(self.__target.path()),
                '-addUnauthenticatedBlob']

      def execute(self):
        """Run the command given at construction time."""
        command = self.command
        return self.cmd(' '.join(command), command)

      @property
      def target(self):
        return self.__target

      def hash(self):
        return self.command

    nsis_includes = drake.nodes(
      'NSIS/nsProcess.nsh',
      'NSIS/utils.nsh',
      'NSIS/UAC.nsh',
      'NSIS/UACHelper.nsh')
    nsis_plugins = drake.nodes(
      'NSIS/nsProcess.dll',
      'NSIS/UAC.dll',
      'NSIS/inetc.dll',
      'NSIS/inetc64.dll',
      'NSIS/ShellExecAsUser.dll')

    # Installer.
    installer_resources = drake.nodes(
      'resources/slices/mac/installer/icon.ico',
      'resources/slices/mac/installer/background.png',
      'resources/fist-gui-qt/Release notes.txt',
      'resources/fist-gui-qt/License.txt',
      'resources/fist-gui-qt/Documentation.txt',
      'resources/fist-gui-qt/Infinit - Episode 2.mp4',
    )

    installer_resources_folder = drake.Path('installer_resources')
    nsis_folder = drake.Path('NSISPlugins')

    nsis_includes = drake.copy(nsis_includes, nsis_folder, strip_prefix = True)
    nsis_plugins = drake.copy(nsis_plugins, nsis_folder, strip_prefix = True)

    mingw_dlls = drake.Path('mingw-dlls')
    dynamic_libraries += drake.copy(drake.nodes(
      'resources/libs/libgcc_s_sjlj-1.dll',
      'resources/libs/libstdc++-6.dll',
      'resources/libs/libwinpthread-1.dll'),
      mingw_dlls,
      strip_prefix = True)

    installer_resources = list(map(
      lambda x: drake.copy(x,
                           installer_resources_folder,
                           strip_prefix = True),
      installer_resources + dynamic_libraries + Qt_images_plugins + shell_extensions)) + nsis_plugins + nsis_includes
    signed_app = Signer(application,
                        installer_resources_folder / 'Infinit.exe').target
    signed_app.dependency_add(osslsigncode)
    installer_resources += [signed_app]
    content = {
      'company': 'Infinit.io',
      'website': 'www.infinit.io',
      'product_name': 'Infinit',

      # Resources.
      'resources_folder':
        str(drake.path_build(installer_resources_folder)),
      'executable': str(signed_app.name().basename()),
      'libraries':
        list(map(lambda lib: str(lib.name().basename()), dynamic_libraries)),
      'images_plugins':
        list(map(lambda lib: str(lib.name().basename()), Qt_images_plugins)),
      'icon': 'icon.ico',
      'background': 'background.png',
      'license': 'License.txt',
      'release_notes': 'Release notes.txt',
      'documentation': 'Documentation.txt',
      'onboarding_file': 'Infinit - Episode 2.mp4',

      'NSIS_Plugins': str(drake.path_build(nsis_folder)),
      'NSIS_Includes': str(drake.path_build(nsis_folder)),
    }
    content.update(architecture_dictionary(cxx_toolkit))
    templating_context = drake.templating.Context(content = content)
    nsi_context = drake.nsis.Context(target = 'bin/unsigned_installer.exe',
                                     resources = installer_resources)
    with nsi_context:
      with templating_context:
        installer = drake.nodes('installer.nsi.tmpl')

    def set_size(context, target):
      context['size'] = os.path.getsize(str(target.path()))

    def set_updater_hash(context, target):
      import hashlib
      hasher = hashlib.sha1()
      with open(str(target.path()), 'rb') as f:
        hasher.update(f.read())
      context['hash'] = hasher.hexdigest()

    content = {
      'version': git.description(),
    }
    content.update(architecture_dictionary(cxx_toolkit))
    installer = Signer(
      drake.Node('bin/unsigned_installer.exe'),
      drake.Path('bin/Infinit_Installer.exe')).target

    templating_context = drake.templating.Context(
      content = content,
      sources = [ installer, ],
      hooks = {
        installer: [ set_size, set_updater_hash ]
      },
    )

    with templating_context:
      update = drake.node('update.xml.tmpl')

    def install_nodes(where, f = drake.install):
      where = drake.Path(where)
      res = []
      res.append(f(installer, where, strip_prefix = True))
      res.append(f(drake.Node('update.xml'), where))
      return res

    install = drake.Rule('install')
    install << install_nodes(prefix)

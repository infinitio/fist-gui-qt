import os
import drake
import drake.cxx
import drake.git
import drake.nsis
import drake.cxx.qt
import drake.templating

from functools import partial

build = None
tests = None
install = None
check = None

with open(str(drake.path_source('../elle/drake-utils.py')), 'r') as f:
  exec(f.read(), globals(), globals())

def architecture_dictionary(cxx_toolkit):
  if cxx_toolkit.architecture == drake.architecture.x86_64:
    return {"architecture": "64"}
  elif cxx_toolkit.architecture == drake.architecture.x86:
    return {"architecture": "32"}
  else:
    raise Exception("unknown architecture: %s" % cxx_toolkit.architecture)

def configure(cxx_toolkit = None,
              cxx_config = drake.cxx.Config(),
              prefix = drake.Path('/usr/local'),
              fist_production_build = False,
              boost = None,
              git = None,
              qt = None,
              libraries = [],
              boost_test = None):
  global build, check, tests, installer, config, toolkit

  prefix = drake.Path(prefix)

  cxx_config = drake.cxx.Config(cxx_config)
  cxx_toolkit = cxx_toolkit or drake.cxx.Toolkit()
  git = git or drake.git.Git(path = drake.path_source('..'))

  if qt is None:
    qt = drake.cxx.qt.Qt(gui = True)

  dynamic_libraries = []
  libraries = [drake.copy(lib, 'lib', strip_prefix = True) for lib in libraries]
  for lib in libraries:
    if isinstance(lib, drake.cxx.DynLib):
      dynamic_libraries.append(lib)

  if boost is None:
    boost = drake.cxx.boost.Boost(cxx_toolkit = cxx_toolkit)
    cxx_config += boost.config()
    cxx_config += boost.config_system()
    cxx_config += boost.config_filesystem()
    cxx_config += boost.config_locale()

  if fist_production_build:
    cxx_config.define('FIST_PRODUCTION_BUILD')
  qt.plug(cxx_toolkit)

  # Qt use file generation tools, which create function with
  # missing declaration.
  cxx_config.warnings.missing_declarations = None

  # Add file config first.
  cxx_config += qt.config
  cxx_config += qt.config_gui
  cxx_config += qt.config_network

  cxx_config.lib_path_runtime('../lib')

  # Add the OS specific libraries. Windows ones has to be put
  # after Qt ones.
  if cxx_toolkit.os == drake.os.windows:
    cxx_config.lib('shlwapi')
    cxx_config.lib('ws2_32')
    cxx_config.lib('gdi32')
    cxx_config.lib('mswsock')
    cxx_config.lib('uuid')
    cxx_config.lib('ole32')
    cxx_config.lib('winmm')
    cxx_config.lib('oleaut32')
    cxx_config.lib('qtmain')
    cxx_config.lib('z')
    cxx_config.lib('comdlg32')
    cxx_config.lib('imm32')
    cxx_config.lib('winspool')
    cxx_config.lib('shell32')
    cxx_config.lib('kernel32')
    cxx_config.lib('QtCore')
    # Remove the command line windows on qt.
    cxx_config.flag("-Wl,-subsystem,windows")
  cxx_config.add_local_include_path('src')

  with drake.templating.Context(architecture_dictionary(cxx_toolkit)):
    sources = drake.nodes(
      "resources/fist-gui-qt/resources.qrc",
      "src/fist-gui-qt/AvatarIcon.cc",
      "src/fist-gui-qt/AvatarIcon.hh",
      "src/fist-gui-qt/AvatarWidget.cc",
      "src/fist-gui-qt/AvatarWidget.hh",
      "src/fist-gui-qt/FileItem.cc",
      "src/fist-gui-qt/FileItem.hh",
      "src/fist-gui-qt/Fist.cc.tmpl",
      "src/fist-gui-qt/Fist.hh",
      "src/fist-gui-qt/Footer.cc",
      "src/fist-gui-qt/Footer.hh",
      "src/fist-gui-qt/HorizontalSeparator.cc",
      "src/fist-gui-qt/HorizontalSeparator.hh",
      "src/fist-gui-qt/IconButton.cc",
      "src/fist-gui-qt/IconButton.hh",
      "src/fist-gui-qt/InfinitDock.cc",
      "src/fist-gui-qt/InfinitDock.hh",
      "src/fist-gui-qt/ListItem.cc",
      "src/fist-gui-qt/ListItem.hh",
      "src/fist-gui-qt/ListWidget.cc",
      "src/fist-gui-qt/ListWidget.hh",
      "src/fist-gui-qt/LoginFooter.cc",
      "src/fist-gui-qt/LoginFooter.hh",
      "src/fist-gui-qt/LoginWindow.cc",
      "src/fist-gui-qt/LoginWindow.hh",
      "src/fist-gui-qt/LoginThread.cc",
      "src/fist-gui-qt/LoginThread.hh",
      "src/fist-gui-qt/Panel.cc",
      "src/fist-gui-qt/Panel.hh",
      "src/fist-gui-qt/RoundButton.cc",
      "src/fist-gui-qt/RoundButton.hh",
      "src/fist-gui-qt/RoundShadowWidget.cc",
      "src/fist-gui-qt/RoundShadowWidget.hh",
      "src/fist-gui-qt/SearchField.cc",
      "src/fist-gui-qt/SearchField.hh",
      "src/fist-gui-qt/SearchResultWidget.cc",
      "src/fist-gui-qt/SearchResultWidget.hh",
      "src/fist-gui-qt/ShapeButton.cc",
      "src/fist-gui-qt/ShapeButton.hh",
      "src/fist-gui-qt/SmoothLayout.cc",
      "src/fist-gui-qt/SmoothLayout.hh",
      "src/fist-gui-qt/SmoothScrollBar.cc",
      "src/fist-gui-qt/SmoothScrollBar.hh",
      "src/fist-gui-qt/TextListItem.cc",
      "src/fist-gui-qt/TextListItem.hh",
      "src/fist-gui-qt/gui/Tooltip.cc",
      "src/fist-gui-qt/gui/Tooltip.hh",
      "src/fist-gui-qt/TransactionFooter.cc",
      "src/fist-gui-qt/TransactionFooter.hh",
      "src/fist-gui-qt/TransactionPanel.cc",
      "src/fist-gui-qt/TransactionPanel.hh",
      "src/fist-gui-qt/TransactionWidget.cc",
      "src/fist-gui-qt/TransactionWidget.hh",
      "src/fist-gui-qt/TransactionWindow.cc",
      "src/fist-gui-qt/TransactionWindow.hh",
      "src/fist-gui-qt/UserWidget.cc",
      "src/fist-gui-qt/UserWidget.hh",
      "src/fist-gui-qt/globals.hh",
      "src/fist-gui-qt/Settings.cc",
      "src/fist-gui-qt/Settings.hh",

      "src/fist-gui-qt/SystrayMessage.hh",
      "src/fist-gui-qt/SystrayMessage.cc",

      "src/fist-gui-qt/Updater.hh",
      "src/fist-gui-qt/Updater.cc",
      "src/fist-gui-qt/LoadingDialog.hh",
      "src/fist-gui-qt/LoadingDialog.cc",

      "src/fist-gui-qt/log/Selector.cc",
      "src/fist-gui-qt/log/Selector.hh",
      "src/fist-gui-qt/log/CircularSelector.cc",
      "src/fist-gui-qt/log/CircularSelector.hh",
      "src/fist-gui-qt/main.cc",

      "src/fist-gui-qt/onboarding/Onboarder.hh",
      "src/fist-gui-qt/onboarding/Onboarder.cc",

      # Models.
      "src/fist-gui-qt/model/Model.cc",
      "src/fist-gui-qt/model/Model.hh",
      "src/fist-gui-qt/model/Model.hxx",
      "src/fist-gui-qt/model/Transaction.cc",
      "src/fist-gui-qt/model/Transaction.hh",
      "src/fist-gui-qt/model/Transaction.hxx",
      "src/fist-gui-qt/model/User.cc",
      "src/fist-gui-qt/model/User.hh",
      "src/fist-gui-qt/model/User.hxx",
      "src/fist-gui-qt/model/Link.cc",
      "src/fist-gui-qt/model/Link.hh",

      "src/fist-gui-qt/gui/GrowingArea.cc",
      "src/fist-gui-qt/gui/GrowingArea.hh",

      "src/fist-gui-qt/gui/TabWidget.cc",
      "src/fist-gui-qt/gui/TabWidget.hh",
      "src/fist-gui-qt/gui/Tab.cc",
      "src/fist-gui-qt/gui/Tab.hh",
      "src/fist-gui-qt/gui/IconProvider.cc",
      "src/fist-gui-qt/gui/IconProvider.hh",
      "src/fist-gui-qt/gui/IconProvider/known.hh",

      "src/fist-gui-qt/gui/ImageSerie.cc",
      "src/fist-gui-qt/gui/ImageSerie.hh",
      "src/fist-gui-qt/gui/SystemTrayIcon.hh",
      "src/fist-gui-qt/gui/SystemTrayIcon.cc",

      "src/fist-gui-qt/State.hh",
      "src/fist-gui-qt/State.cc",

      "src/fist-gui-qt/TwoStateIconButton.hh",
      "src/fist-gui-qt/TwoStateIconButton.cc",

      "src/fist-gui-qt/SendView/Panel.hh",
      "src/fist-gui-qt/SendView/Panel.cc",
      "src/fist-gui-qt/SendView/Footer.cc",
      "src/fist-gui-qt/SendView/Footer.hh",
      "src/fist-gui-qt/SendView/Files.cc",
      "src/fist-gui-qt/SendView/Files.hh",
      "src/fist-gui-qt/SendView/Users.cc",
      "src/fist-gui-qt/SendView/Users.hh",
      "src/fist-gui-qt/SendView/Message.cc",
      "src/fist-gui-qt/SendView/Message.hh",

      "src/fist-gui-qt/MainView/Transactions.cc",
      "src/fist-gui-qt/MainView/Transactions.hh",
      "src/fist-gui-qt/MainView/Links.hh",
      "src/fist-gui-qt/MainView/Links.cc",
      "src/fist-gui-qt/MainView/LinkWidget.cc",
      "src/fist-gui-qt/MainView/LinkWidget.hh",
    )

  application = drake.cxx.Executable(
    'bin/Infinit',
    sources + libraries,
    cxx_toolkit,
    cxx_config,
    strip = True)

  build = drake.Rule('build')
  build << application

  check = drake.Rule('check')

  if cxx_toolkit.os == drake.os.windows:
    ## ------------ ##
    ## Osslsigncode ##
    ## ------------ ##
    ## Osslsigncode is a tool to sign executables.
    osslsigncode_version = drake.Version(1, 7, 1)
    osslsigncode_basename = 'osslsigncode-%s' % osslsigncode_version
    osslsigncode_url = \
      'http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/%s.tar.gz' % osslsigncode_basename
    osslsigncode_tarball = \
      drake.node('osslsigncode/%s.tar.gz' % osslsigncode_basename)
    osslsigncode_configure = \
      drake.node('osslsigncode/%s/configure' % osslsigncode_basename)
    osslsigncode_prefix = drake.path_build('osslsigncode')
    osslsigncode_prefix_absolute = drake.path_root() / osslsigncode_prefix
    osslsigncode = drake.node('osslsigncode/bin/osslsigncode')
    drake.HTTPDownload(
      osslsigncode_url,
      osslsigncode_tarball,
    )
    drake.TarballExtractor(
      osslsigncode_tarball,
      targets = ['%s/configure' % osslsigncode_basename],
    )
    GNUBuilder(
      cxx_toolkit,
      configure = osslsigncode_configure,
      configure_args = [
        '--prefix=%s' % osslsigncode_prefix_absolute,
        # Use our own openssl & curl.
      ],
      targets = [osslsigncode],
      sources = [],
    )

    class Signer(drake.Builder):

      def __init__(self, source, to):
        """Create a signer.

        source -- Node to sign.
        to     -- Destination path.
        """
        self.__source = source
        self.__target = source.clone(to.canonize())
        drake.Builder.__init__(self, [self.__source], [self.__target])

      @property
      def command(self):
        return [str(osslsigncode.path()),
                '-spc', str(drake.Node('fist-gui-qt/resources/authenticode.spc').path()),
                '-key', str(drake.Node('fist-gui-qt/resources/authenticode.key').path()),
                '-t', 'http://timestamp.verisign.com/scripts/timstamp.dll',
                '-in', str(self.__source.path()),
                '-out', str(self.__target.path())]

      def execute(self):
        """Run the command given at construction time."""
        command = self.command
        return self.cmd(' '.join(command), command)

      @property
      def target(self):
        return self.__target

    nsis_includes = drake.nodes('NSIS/nsProcess.nsh',
                                'NSIS/utils.nsh',
                                'NSIS/UAC.nsh',
                                'NSIS/UACHelper.nsh')
    nsis_plugins = drake.nodes('NSIS/nsProcess.dll', 'NSIS/UAC.dll')

    # Installer.
    installer_resources = drake.nodes(
      'resources/slices/mac/installer/icon.ico',
      'resources/slices/mac/installer/background.png',
      'resources/fist-gui-qt/Release notes.txt',
      'resources/fist-gui-qt/License.txt',
      'resources/fist-gui-qt/Documentation.txt',
      'resources/fist-gui-qt/Infinit - Episode 2.mp4',
    )

    installer_resources_folder = drake.Node('installer_resources')
    nsis_folder = drake.Node('NSISPlugins')

    nsis_includes = drake.copy(nsis_includes, 'NSISPlugins', strip_prefix = True)
    nsis_plugins = drake.copy(nsis_plugins, 'NSISPlugins', strip_prefix = True)

    installer_resources = list(map(
        lambda x: drake.copy(x,
                             installer_resources_folder.name().basename(),
                             strip_prefix = True),
        installer_resources + dynamic_libraries)) + nsis_plugins + nsis_includes
    signed_app = Signer(application,
                        installer_resources_folder.name() / 'Infinit.exe').target
    installer_resources += [signed_app]

    content = {
        'company': 'Infinit.io',
        'website': 'www.infinit.io',
        'product_name': 'Infinit',

        # Resources.
        'resources_folder':
          str(drake.path_build(installer_resources_folder.name())),
        'executable': str(signed_app.name().basename()),
        'libraries':
          list(map(lambda lib: str(lib.name().basename()), dynamic_libraries)),
        'icon': 'icon.ico',
        'background': 'background.png',
        'license': 'License.txt',
        'release_notes': 'Release notes.txt',
        'documentation': 'Documentation.txt',
        'onboarding_file': 'Infinit - Episode 2.mp4',

        'NSIS_Plugins': str(drake.path_build(nsis_folder.name())),
        'NSIS_Includes': str(drake.path_build(nsis_folder.name())),
    }
    content.update(architecture_dictionary(cxx_toolkit))
    templating_context = drake.templating.Context(content = content)
    nsi_context = drake.nsis.Context(target = 'bin/unsigned_installer.exe',
                                     resources = installer_resources)
    with nsi_context:
      with templating_context:
        installer = drake.nodes('installer.nsi.tmpl')

    def set_size(context, target):
      context['size'] = os.path.getsize(str(target.path()))

    def set_updater_hash(context, target):
      import hashlib
      hasher = hashlib.sha1()
      with open(str(target.path()), 'rb') as f:
        hasher.update(f.read())
      context['hash'] = hasher.hexdigest()

    content = {
      'version': git.description(),
    }
    content.update(architecture_dictionary(cxx_toolkit))
    installer = Signer(
      drake.Node('bin/unsigned_installer.exe'),
      drake.Path('bin/Infinit_Installer.exe')).target

    templating_context = drake.templating.Context(
      content = content,
      sources = [ installer, ],
      hooks = {
        installer: [ set_size, set_updater_hash ]
      },
    )

    with templating_context:
      update = drake.node('update.xml.tmpl')

    def install_nodes(where, f = drake.install):
      where = drake.Path(where)
      res = []
      res.append(f(installer, where, strip_prefix = True))
      res.append(f(drake.Node('update.xml'), where))
      return res

    install = drake.Rule('install')
    install << install_nodes(prefix)

;==============================================================================
; Important
;==============================================================================
; Nsis use {variable_name} prefixed by a $ for variables which is exactly the
; same syntax used by Mako in his templates.
; Because Mako is ran first, {variable_name} will be interpreted and changed
; by Mako. To declare an nsis variable, you need to use the following pattern:
; {'{variable_name}'}.
;
; e.g.
; file.nsi.tmpl : {'{foo}'}
; file.nsi      : {foo}

;------------------------------------------------------------------------------
; Registry
;------------------------------------------------------------------------------
!define regkey "Software\${company}\${product_name}"
!define uninstkey "Software\Microsoft\Windows\CurrentVersion\Uninstall\${product_name}"
!define company_install "$PROGRAMFILES\${company}"
!define company_startmenu "$SMPROGRAMS\${company}"
!define startmenu "${'${company_startmenu}'}\${product_name}"
!define uninstaller "uninstall.exe"

;------------------------------------------------------------------------------
; Variables.
;------------------------------------------------------------------------------
Var AutoUpdate
Var PreviousInstallDir

;------------------------------------------------------------------------------
; Includes
;------------------------------------------------------------------------------
;; System.
!include FileFunc.nsh
!insertmacro GetParameters
!insertmacro GetOptions
!include x64.nsh
!include MUI2.nsh
!include WinVer.nsh

;; Add custom plugins folders.
!addincludedir ${NSIS_Includes}
!addplugindir ${NSIS_Plugins}

;; Add custom plugins.
!include UAC.nsh
!include nsProcess.nsh
!include utils.nsh

;------------------------------------------------------------------------------
; General configuration
;------------------------------------------------------------------------------

XPStyle on
ShowInstDetails show
ShowUninstDetails hide
AutoCloseWindow false

Name "${product_name}"
Caption "${product_name}"

Icon "${resources_folder}/${icon}"

InstallDir "${'${company_install}'}\${product_name}"
InstallDirRegKey HKLM "${'${regkey}'}" ""

LicenseText "License"
LicenseData "${resources_folder}/${license}"

; Set the text which prompts the user to enter the installation directory
DirText "Choose the install directory"

UninstallText "This will uninstall ${product_name}."
UninstallIcon "${resources_folder}/${icon}"

SetOverwrite ifdiff
SetDateSave on
SetDatablockOptimize on
CRCCheck on
SilentInstall normal

; If admin / highest is passed, command line argument cannot be read.
RequestExecutionLevel admin

Function .OnInstFailed
  libUAC::Unload
FunctionEnd

Function .OnInstSuccess
  libUAC::Unload
  Push "$INSTDIR\${executable}"
  Call RunExecutable
FunctionEnd

Function .OnUnInstFailed
  libUAC::Unload
FunctionEnd

Function .OnUnInstSuccess
  libUAC::Unload
FunctionEnd

Function .onInit
  Call KillRunningProcess
  Call CheckArchitecture

  ;; Search for a previous install folder.
  ReadRegStr $INSTDIR HKLM "${'${regkey}'}" "Install_Dir"
  StrCmp $INSTDIR "" 0 UAC_Elevate
  StrCpy $INSTDIR ${'${company_install}'}\${product_name}

UAC_Elevate:
  libUAC::RunElevated
  StrCmp 1223 $0 UAC_ElevationAborted
  StrCmp 0 $0 0 UAC_Err
  StrCmp 1 $1 0 UAC_Success
  Quit

  StrCmp 1223 $0 UAC_ElevationAborted
  StrCmp 0 $0 0 UAC_Err
  StrCmp 1 $1 0 UAC_Success
  Quit

UAC_Err:
  MessageBox mb_iconstop "Unable to elevate, error $0$\nPlease try to run this installer with admin privileges."
  Abort

UAC_ElevationAborted:
  MessageBox mb_iconstop "This installer requires admin privileges, aborting!"
  Abort

UAC_Success:
  StrCmp 1 $3 +4
  StrCmp 3 $1 0 UAC_ElevationAborted
  MessageBox mb_iconstop "This installer requires admin privileges, try again."
  goto UAC_Elevate

  ;; Look for autoupdate argument.
  Call ParseCommandline

  ${'${If}'} $AutoUpdate == 1
    SetAutoClose true
    SetSilent silent
  ${'${Else}'}
  ${'${Endif}'}
FunctionEnd

;------------------------------------------------------------------------------
; Pages
;------------------------------------------------------------------------------
;;; Used during upgrade to skip most pages
Function PageSkipIfUpdate
  ${'${If}'} $AutoUpdate == 1
    Abort
  ${'${EndIf}'}
FunctionEnd

; MUI Settings
  !define MUI_ABORTWARNING
  !define MUI_ICON "${resources_folder}/${icon}"
  !define MUI_UNICON "${resources_folder}/${icon}"
  !define MUI_COMPONENTSPAGE_SMALLDESC

;; Installer pages.
  ;; Welcome page.
    !define MUI_PAGE_CUSTOMFUNCTION_PRE PageSkipIfUpdate
    !define MUI_WELCOMEPAGE_TITLE_3LINES
    !insertmacro MUI_PAGE_WELCOME
  ;; License page.
    !define MUI_LICENSEPAGE_BUTTON $(^NextBtn)
    !define MUI_LICENSEPAGE_TEXT_BOTTOM "Licence"
    !define MUI_PAGE_CUSTOMFUNCTION_PRE PageSkipIfUpdate
    !insertmacro MUI_PAGE_LICENSE "${resources_folder}\${license}"
  ;; Directory page.
    !define MUI_PAGE_CUSTOMFUNCTION_PRE PageSkipIfUpdate
    !insertmacro MUI_PAGE_DIRECTORY
  ;; Instfiles page.
    !insertmacro MUI_PAGE_INSTFILES
  ;; Finish page
    !define MUI_PAGE_CUSTOMFUNCTION_PRE PageSkipIfUpdate
    !define MUI_FINISHPAGE_LINK ${website}
    !define MUI_FINISHPAGE_LINK_LOCATION ${website}
    !define MUI_FINISHPAGE_NOREBOOTSUPPORT
    !insertmacro MUI_PAGE_FINISH

;; Uninstaller pages.
    !insertmacro MUI_UNPAGE_WELCOME
    !insertmacro MUI_UNPAGE_CONFIRM
    !insertmacro MUI_UNPAGE_COMPONENTS
    !insertmacro MUI_UNPAGE_INSTFILES
    !insertmacro MUI_UNPAGE_FINISH

; Language files
  !insertmacro MUI_LANGUAGE "English" # first language is the default language

;------------------------------------------------------------------------------
; Installer background
;------------------------------------------------------------------------------

!ifdef background

  Function .onGUIInit
    ;; extract background BMP into temp plugin directory
    InitPluginsDir
    File /oname=$PLUGINSDIR\1.bmp "${resources_folder}/${background}"

    BgImage::SetBg /NOUNLOAD /FILLSCREEN $PLUGINSDIR\1.bmp
    BgImage::Redraw /NOUNLOAD
  FunctionEnd

  Function .onGUIEnd
    ;; Destroy must not have /NOUNLOAD so NSIS will be able to unload and
    ;; delete BgImage before it exits
    BgImage::Destroy
  FunctionEnd

!endif

;------------------------------------------------------------------------------
; Install section
;------------------------------------------------------------------------------

Section "Install ${product_name}"

  ;; Registers.
  WriteRegStr HKLM "${'${regkey}'}" "Install_Dir" "$INSTDIR"
  WriteRegStr HKLM "${'${uninstkey}'}" "DisplayName" "${product_name} (remove only)"
  WriteRegStr HKLM "${'${uninstkey}'}" "UninstallString" '"$INSTDIR\${'${uninstaller}'}"'
  WriteRegStr HKCR "${product_name}\DefaultIcon" "" "$INSTDIR\${icon}"

  SetOutPath $INSTDIR

  ;; Executable and libraries.
  File "${resources_folder}\${executable}"
  % for lib in libraries:
    File "${resources_folder}/${lib}"
  % endfor

  ;; Documentation.
  File "${resources_folder}\${license}"
  File "${resources_folder}\${release_notes}"
  File "${resources_folder}\${documentation}"
  File "${resources_folder}\${icon}"
  File "${resources_folder}\${onboarding_file}"

  ;; Uninstaller.
  WriteUninstaller "${'${uninstaller}'}"

SectionEnd


;------------------------------------------------------------------------------
; Create shortcuts section
;------------------------------------------------------------------------------

Section "Create shortcuts"
  CreateDirectory "${'${startmenu}'}"
  SetOutPath $INSTDIR ; for working directory

  CreateShortCut "${'${startmenu}'}\${product_name}.lnk" "$INSTDIR\${executable}" "" "$INSTDIR\${icon}"
  CreateShortCut "${'${startmenu}'}\Release Notes.lnk" "$INSTDIR\${release_notes}"
  CreateShortCut "${'${startmenu}'}\Documentation.lnk" "$INSTDIR\${documentation}"
  CreateShortCut "${'${startmenu}'}\Uninstall.lnk" "$INSTDIR\${'${uninstaller}'}" "" "$INSTDIR\${icon}"

  ; WriteINIStr "${'${startmenu}'}\WebSite.url" "InternetShortcut" "URL" ${website}
  CreateShortCut "${'${startmenu}'}\WebSite.lnk" "${website}" "URL"
SectionEnd

;------------------------------------------------------------------------------
; Uninstall section
;------------------------------------------------------------------------------

Section "un.install"
  ;; Registers
  DeleteRegKey HKLM "${'${uninstkey}'}"
  DeleteRegKey HKLM "${'${regkey}'}"

  ;; Start menu
  Delete "${'${startmenu}'}\${product_name}.lnk"
  Delete "${'${startmenu}'}\Release Notes.lnk"
  Delete "${'${startmenu}'}\Documentation.lnk"
  Delete "${'${startmenu}'}\Uninstall.lnk"
  Delete "${'${startmenu}'}\WebSite.lnk"
  RMDir "${'${startmenu}'}"
  RMDir "${'${company_startmenu}'}"

  ;; Documentation.
  Delete "$INSTDIR\${license}"
  Delete "$INSTDIR\${release_notes}"
  Delete "$INSTDIR\${icon}"
  Delete "$INSTDIR\${documentation}"
  Delete "$INSTDIR\${onboarding_file}"

  ;; Executable and libraries.
  Delete "$INSTDIR\${executable}"
  % for lib in libraries:
    Delete "$INSTDIR\${lib}"
  % endfor

  ;; Uninstaller.
  Delete "$INSTDIR\${'${uninstaller}'}"

  ;; Install dir.
  ;; /r is a bad practice but if the user uninstall the app, he wants the folder
  ;; to be emptied by the uninstaller.
  RMDir /r "$INSTDIR"
  RMDir "${'${company_install}'}"
SectionEnd

;------------------------------------------------------------------------------
; Registry
;------------------------------------------------------------------------------
!define regkey "Software\${company}\${product_name}"
!define uninstkey "Software\Microsoft\Windows\CurrentVersion\Uninstall\${product_name}"
!define company_install "$PROGRAMFILES\${company}"
!define company_startmenu "$SMPROGRAMS\${company}"
!define startmenu "${'${company_startmenu}'}\${product_name}"
!define uninstaller "uninstall.exe"

;------------------------------------------------------------------------------
; Variables.
;------------------------------------------------------------------------------
Var AutoUpdate
Var PreviousInstallDir
Var _has_been_killed
Var FingerPrint

;------------------------------------------------------------------------------
; Includes
;------------------------------------------------------------------------------
;; System.
!include FileFunc.nsh
!insertmacro GetParameters
!insertmacro GetOptions
!include x64.nsh
!include WinVer.nsh

;; Add custom plugins folders.
!addincludedir ${NSIS_Includes}
!addplugindir ${NSIS_Plugins}

;; Add custom plugins.
!include UAC.nsh
!include nsProcess.nsh
!include "MUI.nsh"

!include utils.nsh

;------------------------------------------------------------------------------
; General configuration
;------------------------------------------------------------------------------

XPStyle on
ShowInstDetails show
ShowUninstDetails hide
AutoCloseWindow false

Name "${product_name}"
Caption "${product_name}"

Icon "${resources_folder}/${icon}"

; If admin / highest is passed, command line argument cannot be read.
RequestExecutionLevel highest

SetOverwrite ifdiff
SetDateSave on
SetDatablockOptimize on
CRCCheck on
SilentInstall normal

InstallDir "${'${company_install}'}\${product_name}"
InstallDirRegKey HKLM "${'${regkey}'}" ""

LicenseText "License"
LicenseData "${resources_folder}/${license}"

; Set the text which prompts the user to enter the installation directory
DirText "Choose the install directory"

UninstallText "This will uninstall ${product_name}."
UninstallIcon "${resources_folder}/${icon}"

; Don Tommaso's technique to avoid code duplication between installer and
; uninstaller
!macro INSTALL_UNINSTALL_SWITCH un
  ;----------------------------------------------------------------------------
  ; Kill running application if any.
  ; XXX: Should be move in util and take executable as parameter.
  ;!include nsProcess.nsh
  Function ${'${un}'}KillProcess
      Pop $R1
      ${'${nsProcess::FindProcess}'} $R1 $R0
      StrCmp $R0 0 0 end

      ${'${nsProcess::KillProcess}'} $R1 $R0
      ; ${'${nsProcess::CloseProcess}'} $R1 $R0
      IfSilent end
      StrCmp $R0 0 end 0      ; Success
      StrCmp $R0 603 end 0    ; Not running
      end:
        ${'${nsProcess::Unload}'}
  FunctionEnd

  Function ${'${un}'}KillRunningProcess
      Push ${executable}
      Call ${'${un}'}KillProcess
  FunctionEnd

  ;----------------------------------------------------------------------------
  ; Delete the contextual dll.
  ; If deletion failed, kill the explorer, and retry to delete.
  Function ${'${un}'}DeleteContextualDll
    IfFileExists "$INSTDIR\lib\libcontextual.dll" 0 libcontextual.dllend
    Delete "$INSTDIR\lib\libcontextual.dll"
    IfFileExists "$INSTDIR\lib\libcontextual.dll" kill_explorer_and_relaunch 0
    libcontextual.dllend:
    Goto finalize
    kill_explorer_and_relaunch:
      StrCmp $_has_been_killed "" 0 end
      StrCpy $_has_been_killed "killed"
      Push "explorer.exe"
      Call ${'${un}'}KillProcess
      Sleep 500
      Call ${'${un}'}DeleteContextualDll
      Goto end
    finalize:
      ${'${nsProcess::FindProcess}'} "explorer.exe" $R0
      IntCmp $R0 0 end relaunch
    relaunch:
      Exec "$WINDIR\explorer.exe"
    end:
      ${'${nsProcess::Unload}'}
  FunctionEnd

  ;----------------------------------------------------------------------------
  ; Delete all the dll.
  Function ${'${un}'}DeleteDlls
    % for lib in libraries:
      IfFileExists "$INSTDIR\${lib}" 0 ${lib}end
      Delete /REBOOTOK "$INSTDIR\${lib}"
      ${lib}end:
    % endfor
    % for lib in images_plugins:
      IfFileExists "$INSTDIR\imageformats\${lib}" 0 ${lib}end
      Delete /REBOOTOK "$INSTDIR\imageformats\${lib}"
      ${lib}end:
    % endfor
  FunctionEnd
!macroend

;------------------------------------------------------------------------------
; Replace contextual dll.
Function ReplaceContextualDll
    SetOutPath $INSTDIR\lib
    Call DeleteContextualDll
    ${'${If}'} ${'${RunningX64}'}
      File "/oname=libcontextual.dll" "${resources_folder}/libcontextual64.dll"
    ${'${Else}'}
      File "/oname=libcontextual.dll" "${resources_folder}/libcontextual32.dll"
    ${'${Endif}'}
    SetOutPath $INSTDIR
FunctionEnd

Function InstallDlls
    SetOutPath $INSTDIR
    % for lib in libraries:
      File "${resources_folder}/${lib}"
    % endfor
    SetOutPath $INSTDIR\imageformats
    % for lib in images_plugins:
      File "${resources_folder}/${lib}"
    % endfor
    SetOutPath $INSTDIR
FunctionEnd

!insertmacro INSTALL_UNINSTALL_SWITCH ""
!insertmacro INSTALL_UNINSTALL_SWITCH "un."

;------------------------------------------------------------------------------
; Get the contextual menu GUID of the shell extension.
Function RegisterContextual
    ${'${If}'} ${'${RunningX64}'}
        SetRegView 64
    ${'${Else}'}
        SetRegView 32
    ${'${Endif}'}
    ReadRegStr $R0 HKCR "AllFileSystemObjects\shellex\ContextMenuHandlers\Infinit" ""
    StrCmp $R0 "" write_registery write_registery
    write_registery:
      WriteRegStr HKCR "AllFileSystemObjects\shellex\ContextMenuHandlers\Infinit" "" "{256EF94C-697D-4986-B99B-9D3B15D79B49}"
      WriteRegStr HKCR "CLSID\{256EF94C-697D-4986-B99B-9D3B15D79B49}" "" "InfinitContextualMenuHandler"
      WriteRegStr HKCR "CLSID\{256EF94C-697D-4986-B99B-9D3B15D79B49}\InProcServer32" "ThreadingModel" "Apartment"
      WriteRegStr HKCR "CLSID\{256EF94C-697D-4986-B99B-9D3B15D79B49}\InProcServer32" "" "${'${company_install}'}\${product_name}\lib\libcontextual.dll"
    end:
FunctionEnd

;------------------------------------------------------------------------------
; Get the contextual menu GUID of the shell extension.
Function un.RegisterContextual
    ${'${If}'} ${'${RunningX64}'}
        SetRegView 64
    ${'${Else}'}
        SetRegView 32
    ${'${Endif}'}

    DeleteRegKey HKCR "*\shellex\ContextMenuHandlers\Infinit\"
    DeleteRegKey HKCR "AllFileSystemObjects\shellex\ContextMenuHandlers\Infinit"
    DeleteRegKey HKCR "CLSID\{256EF94C-697D-4986-B99B-9D3B15D79B49}\InProcServer32"
    DeleteRegKey HKCR "CLSID\{256EF94C-697D-4986-B99B-9D3B15D79B49}"
FunctionEnd

;------------------------------------------------------------------------------

Function .onInit
  ${'${If}'} ${'${AtLeastWinVista}'}
  ${'${Else}'}
    MessageBox mb_iconstop "Infinit is not currently compatible with your version of Windows.\nYou need Windows Vista or any subsequent version of Windows."
    Abort
  ${'${Endif}'}

  Push "INFINIT_FINGERPRINT:"
  Call ReadCustomerData
  Pop $FingerPrint

  Call KillRunningProcess
  Call CheckArchitecture

  ;; Search for a previous install folder.
  ReadRegStr $INSTDIR HKLM "${'${regkey}'}" "Install_Dir"

  ;; If none has been found, High execution level is requiered.
  StrCmp $INSTDIR "" 0 UAC_Elevate
  StrCpy $INSTDIR ${'${company_install}'}\${product_name}

UAC_Elevate:
  !insertmacro UAC_RunElevated
  StrCmp 1223 $0 UAC_ElevationAborted
  StrCmp 0 $0 0 UAC_Err
  StrCmp 1 $1 0 UAC_Success
  Quit

  StrCmp 1223 $0 UAC_ElevationAborted
  StrCmp 0 $0 0 UAC_Err
  StrCmp 1 $1 0 UAC_Success
  Quit

UAC_Err:
  MessageBox mb_iconstop "Unable to elevate, error $0$\nPlease try to run this installer with admin privileges."
  Abort

UAC_ElevationAborted:
  MessageBox mb_iconstop "This installer requires admin privileges, aborting!"
  Abort

UAC_Success:
  StrCmp 1 $3 +4
  StrCmp 3 $1 0 UAC_ElevationAborted
  MessageBox mb_iconstop "This installer requires admin privileges, try again."
  goto UAC_Elevate

  Call KillRunningProcess
  ;; Look for autoupdate.
  Call ParseCommandline


  ${'${If}'} $AutoUpdate == 1
    SetAutoClose true
    SetSilent silent
  ${'${Else}'}
    SetSilent normal
  ${'${Endif}'}

FunctionEnd

Function .OnInstSuccess
  Push "$FingerPrint"
  Push "$INSTDIR\${executable}"
  Call RunExecutable
FunctionEnd

;------------------------------------------------------------------------------
; Pages
;------------------------------------------------------------------------------

;;; Used during upgrade to skip most pages
Function PageSkipIfUpdate
  ${'${If}'} $PerformUpdate == 1
    Abort
  ${'${EndIf}'}
FunctionEnd

; MUI Settings
  !define MUI_ABORTWARNING
  !define MUI_ICON "${resources_folder}/${icon}"
  !define MUI_UNICON "${resources_folder}/${icon}"
  !define MUI_COMPONENTSPAGE_SMALLDESC

;; Installer pages.
  ;; Welcome page.
    !define MUI_PAGE_CUSTOMFUNCTION_PRE PageSkipIfUpdate
    !define MUI_WELCOMEPAGE_TITLE_3LINES
    !insertmacro MUI_PAGE_WELCOME
  ;; License page.
    !define MUI_LICENSEPAGE_BUTTON $(^NextBtn)
    !define MUI_LICENSEPAGE_TEXT_BOTTOM "Licence"
    !define MUI_PAGE_CUSTOMFUNCTION_PRE PageSkipIfUpdate
    !insertmacro MUI_PAGE_LICENSE "${resources_folder}\${license}"
  ;; Directory page.
    !define MUI_PAGE_CUSTOMFUNCTION_PRE PageSkipIfUpdate
    !insertmacro MUI_PAGE_DIRECTORY
  ;; Instfiles page.
    !insertmacro MUI_PAGE_INSTFILES
  ;; Finish page
    !define MUI_PAGE_CUSTOMFUNCTION_PRE PageSkipIfUpdate
    !define MUI_FINISHPAGE_LINK ${website}
    !define MUI_FINISHPAGE_LINK_LOCATION ${website}
    !define MUI_FINISHPAGE_NOREBOOTSUPPORT
    !insertmacro MUI_PAGE_FINISH

;; Uninstaller pages.
    !insertmacro MUI_UNPAGE_WELCOME
    !insertmacro MUI_UNPAGE_CONFIRM
    !insertmacro MUI_UNPAGE_COMPONENTS
    !insertmacro MUI_UNPAGE_INSTFILES
    !insertmacro MUI_UNPAGE_FINISH

; Language files
  !insertmacro MUI_LANGUAGE "English" # first language is the default language

;------------------------------------------------------------------------------
; Installer background
;------------------------------------------------------------------------------

!ifdef background

  Function .onGUIInit
    ;; extract background BMP into temp plugin directory
    InitPluginsDir
    File /oname=$PLUGINSDIR\1.bmp "${resources_folder}/${background}"

    BgImage::SetBg /NOUNLOAD /FILLSCREEN $PLUGINSDIR\1.bmp
    BgImage::Redraw /NOUNLOAD
  FunctionEnd

  Function .onGUIEnd
    ;; Destroy must not have /NOUNLOAD so NSIS will be able to unload and
    ;; delete BgImage before it exits
    BgImage::Destroy
  FunctionEnd

!endif

;------------------------------------------------------------------------------
; Install section
;------------------------------------------------------------------------------

Function Trim
  Exch $R1 ; Original string
  Push $R2
  Loop:
    StrCpy $R2 "$R1" 1
    StrCmp "$R2" "{" TrimLeft
    StrCmp "$R2" "$\r" TrimLeft
    StrCmp "$R2" "$\n" TrimLeft
    StrCmp "$R2" "$\t" TrimLeft
    GoTo Loop2
   TrimLeft:
     StrCpy $R1 "$R1" "" 1
     Goto Loop

   Loop2:
    StrCpy $R2 "$R1" 1 -1
    StrCmp "$R2" "}" TrimRight
    StrCmp "$R2" "$\r" TrimRight
    StrCmp "$R2" "$\n" TrimRight
    StrCmp "$R2" "$\t" TrimRight
    GoTo Done
TrimRight:
    StrCpy $R1 "$R1" -1
    Goto Loop2
Done:
    Pop $R2
    Exch $R1
FunctionEnd

!define Trim "!insertmacro Trim"
 !macro Trim ResultVar String
  Push "${'${String}'}"
  Call Trim
  Pop "${'${ResultVar}'}"
!macroend

Function CreateGUID
  System::Call 'ole32::CoCreateGuid(g .s)'
FunctionEnd

!macro _CreateGUID _RetVar
    Call CreateGUID
    !if ${'${_RetVar}'} != s
        Pop $5
        ${'${Trim}'} ${'${_RetVar}'} $5
    !endif
!macroend
!define CreateGUID `!insertmacro _CreateGUID`

var timestamp
var uuid
Section "Install ${product_name}"
  IfFileExists "$PROFILE\.infinit\device.uuid" skip 0
    ;; Create .infinit directory and add device.uuid inside.
    CreateDirectory "$PROFILE\.infinit"
    ClearErrors
    ${'${CreateGUID}'} $uuid
    FileOpen $0 "$PROFILE\.infinit\device.uuid" w
    IfErrors skip
    FileWrite $0 $uuid
    FileClose $0

    ;; Generate a timestamp.
    ClearErrors
    system::call *(&i16,l)i.s
    system::call 'kernel32::GetLocalTime(isr0)'
    IntOp $1 $0 + 16
    system::call 'kernel32::SystemTimeToFileTime(ir0,ir1)'
    system::call *$1(l.r1)
    system::free $0
    system::Int64Op $1 / 10000000
    Pop $1
    system::Int64Op $1 - 11644473600
    Pop $5
    StrCpy $timestamp $5

    ;; Send metrics.
    StrCpy $3 "{$\"event$\":$\"installer/begin$\",$\"os$\":$\"Windows$\",$\"os_version$\":$\"unknown$\",$\"device_id$\":$\"$uuid$\",$\"user$\":$\"unknown$\",$\"timestamp$\":$Timestamp}"
    inetc::post $3 /HEADER "Content-Type:application/json" "http://metrics.9.0.api.production.infinit.io/users" "$PROFILE\.infinit\installer_metric.begin" /END

  skip:
  ;; Registers.
  ClearErrors

  Delete "$SMSTARTUP\${product_name}.lnk"
  Delete "$SMSTARTUP\${product_name}"
  WriteRegStr HKLM "${'${regkey}'}" "Install_Dir" "$INSTDIR"
  WriteRegStr HKLM "${'${uninstkey}'}" "DisplayName" "${product_name} (remove only)"
  WriteRegStr HKLM "${'${uninstkey}'}" "UninstallString" '"$INSTDIR\${'${uninstaller}'}"'
  WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Run" "${product_name}" "$INSTDIR\${executable}"
  WriteRegStr HKCR "${product_name}\DefaultIcon" "" "$INSTDIR\${icon}"
  WriteRegStr HKCR "${product_name}" "" "URL: ${product_name} Protocol"
  WriteRegStr HKCR "${product_name}" "URL Protocol" ""
  WriteRegStr HKCR "${product_name}\shell\open\command" "" '"$INSTDIR\${executable}" "%1"'

  SetOutPath $INSTDIR
  ;; Executable and libraries.
  File "${resources_folder}\${executable}"
  Call InstallDlls
  Call ReplaceContextualDll

  Call RegisterContextual
  ;; Documentation.
  SetOutPath $INSTDIR ; for working directory
  File "${resources_folder}\${license}"
  File "${resources_folder}\${release_notes}"
  File "${resources_folder}\${documentation}"
  File "${resources_folder}\${icon}"
  File "${resources_folder}\${onboarding_file}"

  ;; Uninstaller.
  WriteUninstaller "${'${uninstaller}'}"

  StrCmp $timestamp "" end 0
    StrCpy $3 "{$\"event$\":$\"installer/end$\",$\"os_version$\":$\"unknown$\",$\"os$\":$\"Windows$\",$\"device_id$\":$\"$uuid$\",$\"user$\":$\"unknown$\",$\"timestamp$\":$timestamp}"
    inetc::post $3 /HEADER "Content-Type:application/json" "http://metrics.9.0.api.production.infinit.io/users" "$PROFILE\.infinit\installer_metric.end" /END
  end:
SectionEnd


;------------------------------------------------------------------------------
; Create shortcuts section
;------------------------------------------------------------------------------


Section "Create shortcuts"
  CreateDirectory "${'${startmenu}'}"
  SetOutPath $INSTDIR ; for working directory

  CreateShortCut "${'${startmenu}'}\${product_name}.lnk" "$INSTDIR\${executable}" "" "$INSTDIR\${icon}"
  CreateShortCut "${'${startmenu}'}\Release Notes.lnk" "$INSTDIR\${release_notes}"
  CreateShortCut "${'${startmenu}'}\Documentation.lnk" "$INSTDIR\${documentation}"
  CreateShortCut "${'${startmenu}'}\Uninstall.lnk" "$INSTDIR\${'${uninstaller}'}" "" "$INSTDIR\${icon}"

  ; WriteINIStr "${'${startmenu}'}\WebSite.url" "InternetShortcut" "URL" ${website}
  CreateShortCut "${'${startmenu}'}\WebSite.lnk" "${website}" "URL"
SectionEnd

;------------------------------------------------------------------------------
; Uninstall section
;------------------------------------------------------------------------------

Section "un.install"
  Call un.KillRunningProcess
  Call un.RegisterContextual

  ;; Registers
  DeleteRegKey HKLM "${'${uninstkey}'}"
  DeleteRegKey HKLM "${'${regkey}'}"
  DeleteRegKey HKCR "${product_name}"

  ;; Start menu
  Delete /REBOOTOK "${'${startmenu}'}\${product_name}.lnk"
  Delete /REBOOTOK "${'${startmenu}'}\Release Notes.lnk"
  Delete /REBOOTOK "${'${startmenu}'}\Documentation.lnk"
  Delete /REBOOTOK "${'${startmenu}'}\Uninstall.lnk"
  Delete /REBOOTOK "${'${startmenu}'}\WebSite.lnk"
  RMDir /r "${'${startmenu}'}"
  RMDir /r "${'${company_startmenu}'}"

  ;; Documentation.
  Delete "$INSTDIR\${license}"
  Delete "$INSTDIR\${release_notes}"
  Delete "$INSTDIR\${icon}"
  Delete "$INSTDIR\${documentation}"
  Delete "$INSTDIR\${onboarding_file}"

  ;; Executable and libraries.
  Delete /REBOOTOK "$INSTDIR\${executable}"
  Call un.DeleteContextualDll
  Call un.DeleteDlls

  ;; Uninstaller.
  Delete /REBOOTOK "$INSTDIR\${'${uninstaller}'}"

  ;; Install dir.
  RMDir /REBOOTOK /r "$PROFILE\.infinit"
  RMDir /REBOOTOK /r "$INSTDIR"
  RMDir /REBOOTOK /r "${'${company_install}'}"
SectionEnd

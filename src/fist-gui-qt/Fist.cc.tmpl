#ifdef INFINIT_WINDOWS
# include <boost/filesystem/path.hpp>
# include <boost/filesystem/detail/utf8_codecvt_facet.hpp>
# include <locale>
# include <boost/locale.hpp>
#endif

#include <boost/program_options.hpp>

#include <memory>
#include <sstream>
#include <string>
#include <vector>
#include <functional>

#include <QDesktopServices>
#include <QDesktopWidget>
#include <QDir>
#include <QFont>
#include <QFontDatabase>
#include <QIcon>
#include <QLocalSocket>
#include <QMessageBox>
#include <QPixmap>
#include <QTextCodec>

#include <elle/Exception.hh>
#include <elle/finally.hh>
#include <elle/log.hh>
#include <elle/log/TextLogger.hh>
#include <elle/memory.hh>
#include <elle/os/environ.hh>
#include <elle/os/path.hh>
#include <elle/string/algorithm.hh>
#include <elle/system/platform.hh>

#include <common/common.hh>
#include <surface/gap/gap.hh>
#include <version.hh>
#include <CrashReporter.hh>

#include <fist-gui-qt/log/CircularSelector.hh>
#include <fist-gui-qt/utils.hh>
#include <fist-gui-qt/Fist.hh>
#include <fist-gui-qt/icons.hh>
#include <fist-gui-qt/login/Window.hh>
#include <fist-gui-qt/Updater.hh>
#include <fist-gui-qt/InfinitDock.hh>
#include <fist-gui-qt/Settings.hh>
#include <fist-gui-qt/State.hh>

ELLE_LOG_COMPONENT("infinit.FIST.Fist");

// XXX: This is dirty but there is no good way to emit a signal from a static
// method. Unfortunately, gap api, which is in C, forces to attach C callbacks.
// Attaching a static method works but make signal emission impossible.
// The only 'good' way found, while there is only one instance of Fist
// is to add a global pointer to the dock and makes it emit the signal.
Fist* g_fist = nullptr;

static QFile crash_witness(QString::fromStdString(
  elle::os::path::join(common::infinit::home(), "crashed")));

#define SUICIDE(signal) ::exit(1);

namespace
{
  static std::string ADD = "add";
  static std::string LINK = "link";
  static std::string addtag = elle::sprintf("--%s ", ADD);
  static std::string linktag = elle::sprintf("--%s ", LINK);
}
namespace
{
  static std::unique_ptr<infinit::fist::log::Selector> logger;
  static
  void
  remove_current_log()
  {
    if (elle::os::inenv("INFINIT_LOG_FILE"))
    {
      if (logger)
      {
        logger->remove_current_log();
      }
    }
  }

  static
  void
  write_crash_file(int signal)
  {
    crash_witness.open(QIODevice::WriteOnly);
    crash_witness.setPermissions(QFile::ReadOwner);
    SUICIDE(signal);
  }

  static
  void
  try_to_quit(int signal)
  {
    g_fist->quit();
  }
}

class Fist::Prologue
{
  friend Fist;

  Prologue()
  {
#ifdef INFINIT_WINDOWS
  std::locale::global(boost::locale::generator().generate(""));
  boost::filesystem::path::imbue(std::locale());
#endif

#ifdef FIST_PRODUCTION_BUILD
    elle::os::setenv("INFINIT_CRASH_DEST", "crash@infinit.io", false);
    if (!elle::os::inenv("INFINIT_LOG_FILE") && !elle::os::inenv("ELLE_LOG_FILE"))
    {
      logger.reset(
        new infinit::fist::log::CircularSelector(
          elle::os::path::join(common::infinit::home(), "state%s.log"),
          4));

      elle::os::setenv("INFINIT_LOG_FILE",
                       logger->log_file(),
                       true);
    }
    else
    {
      logger.reset(
        new infinit::fist::log::Selector(
          elle::os::getenv("INFINIT_LOG_FILE",
                           elle::os::getenv("ELLE_LOG_FILE"))));
    }
#endif // FIST_PRODUCTION_BUILD

    ELLE_TRACE_SCOPE("ininitialize Prologue");
  }
};

Fist::CommandLine::CommandLine(std::vector<std::string> const& files_,
                               bool link)
  : files(files_)
  , link(link)
{}

QList<QUrl>
Fist::CommandLine::urls() const
{
  QList<QUrl> urls;
  for (auto const& file: this->files)
  {
    urls.append(QUrl::fromLocalFile(QDir::toNativeSeparators(QString::fromUtf8(file.c_str()))));
  }
  return urls;
}

void
Fist::_parse_options(int argc, char** argv)
{
  ELLE_LOG("parse options");
  this->_command_line.reset();
  using namespace boost::program_options;
  options_description options("Allowed options");
  options.add_options()
    ("help,h", "print help")
    (LINK.c_str(),
     value<std::vector<std::string>>()->multitoken(),
     "generate a link for one or multiple file(s)")
    (ADD.c_str(),
     value<std::vector<std::string>>()->multitoken(),
     "add file(s)")
    ;
  variables_map vm;
  try
  {
    store(parse_command_line(argc, argv, options), vm);
    notify(vm);
  }
  catch (invalid_command_line_syntax const& e)
  {
  }
  catch (...)
  {
  }

  if (vm.count("help"))
  {
    std::cout << "Usage: " << argv[0] << " [options]" << std::endl;
    std::cout << std::endl;
    std::cout << options;
    std::cout << std::endl;
    std::cout << "Infinit " INFINIT_VERSION
      " Copyright (c) 2013 infinit.io All rights reserved." << std::endl;
    exit(0); // XXX: use Exit exception
  }

  if (vm.count(LINK))
    this->_command_line.reset(new CommandLine(vm[LINK].as<std::vector<std::string>>(), true));
  else if (vm.count(ADD))
    this->_command_line.reset(new CommandLine(vm[ADD].as<std::vector<std::string>>(), false));
}

Fist::Fist(int argc, char** argv):
  _prologue(new Fist::Prologue()),
  _state(nullptr),
  _lock(nullptr),
  _previous_session_crashed(false),
  _filelock(
    QString::fromStdString(
      elle::os::path::join(common::infinit::home(), "lock"))),
  _application(new QApplication(argc, argv)),
  _updater(nullptr),
  _systray(fist::icon::inactive, this),
  _login_window(nullptr),
  _dock(nullptr),
  _command_line(nullptr)
{
  ELLE_TRACE_SCOPE("%s: construction", *this);
  g_fist = this;
  this->_initialize_application();
  this->_systray.hide();
  this->_application->installEventFilter(this);
  connect(this->_application.get(), SIGNAL(aboutToQuit()),
          this, SLOT(about_to_quit()));
  this->_parse_options(argc, argv);
  if (!this->_set_uniqunness_guard())
    throw elle::Exception("unable to set lock");
  // We have to create a state here because crash report need a
  // state to be ran.
  this->_initialize_state();
  this->_put_lock_file();
}

bool
Fist::eventFilter(QObject *obj, QEvent *event)
{
  if (obj != this->_application.get())
    return Super::eventFilter(obj, event);

  if (event->type() == QEvent::Close)
  {
    ELLE_DEBUG("clear lock")
    {
      this->_filelock.setPermissions(QFile::WriteOwner);
      this->_filelock.remove();
    }
    ELLE_DEBUG("close updater")
      if (this->_updater != nullptr)
      {
        this->_updater->loading_dialog()->hide();
        this->_updater->loading_dialog()->close();
        this->_updater.reset();
      }
  }
  return Super::eventFilter(obj, event);
}


Fist::~Fist()
{
  ELLE_TRACE_SCOPE("%s: destruction", *this);
}

void
Fist::_initialize_state()
{
  // Destroy previous state first.
  this->_state.reset();

  std::unique_ptr<fist::State> state{new fist::State};
  connect(state.get(), SIGNAL(kicked_out(QString const&)),
          this, SLOT(_kicked_out(QString const&)));
  this->_state = std::move(state);
}

void
Fist::_initialize_application()
{
  ELLE_TRACE_SCOPE("%s: initialize Qt", *this);
  QFontDatabase database;
  auto luc = database.addApplicationFont(":/font/LucidaGrande");
  auto mont = database.addApplicationFont(":/font/Montserrat");
  if (luc == -1 || mont == -1)
    ELLE_WARN("%s: impossible to install fonts", *this);

  QDir::setCurrent(QDesktopServices::storageLocation(QDesktopServices::DesktopLocation));
  QFont arial("Arial", 11);
  arial.setPixelSize(11);
  arial.setStyleStrategy(QFont::PreferAntialias);
  this->_application->setFont(arial);

  this->_application->setWindowIcon(QIcon(QPixmap(":/logo")));
  this->_application->setQuitOnLastWindowClosed(false);
}

void
Fist::about_to_quit()
{
  ELLE_TRACE_SCOPE("%s: run cleaning operations", *this);
  ELLE_DEBUG("clear lock")
  {
    this->_filelock.setPermissions(QFile::WriteOwner);
    this->_filelock.remove();
  }
  ELLE_DEBUG("close updater")
    if (this->_updater != nullptr)
    {
      this->_updater->loading_dialog()->hide();
      this->_updater->loading_dialog()->close();
      this->_updater.reset();
    }
  auto kicked = false;
  auto final = true;
  if (this->_state)
    this->logout(kicked, final);
  ELLE_ASSERT(this->_state == nullptr);
  ELLE_LOG("cleaning done");
}

void
Fist::quit()
{
  ELLE_TRACE_SCOPE("%s: quit", *this);
  ELLE_LOG("quit")
    this->_application->quit();
}

void
Fist::_initialize_login_window(bool prefill_fields)
{
  ELLE_TRACE_SCOPE("%s: initialize login window", *this);
  ELLE_ASSERT(this->_state != nullptr);
  this->_login_window.reset(
    new fist::login::Window(
      *this->_state,
      this->_systray,
      prefill_fields,
      this->_previous_session_crashed));
  this->_previous_session_crashed = false;
  this->_update_loginwindow_updater_connections(true);
  // Handle quit from login window.
  connect(this->_login_window.get(), SIGNAL(quit_request()),
          this, SLOT(quit()));
  // Disable updaters signals while logging in.
  connect(this->_login_window.get(), SIGNAL(login_attempt()),
          this, SLOT(_logging_in()));
  // Reanable updaters signals if login was a failure.
  connect(this->_login_window.get(), SIGNAL(login_failed()),
          this, SLOT(_login_failed()));
  // Force version checking if the current has been rejected by meta.
  connect(this->_login_window.get(), SIGNAL(version_rejected()),
          this->_updater.get(), SLOT(version_rejected()));
  // Login.
  connect(this->_login_window.get(), SIGNAL(logged_in()),
          this, SLOT(logged_in()));
  this->_login_window->setFocus();
}

int
Fist::operator ()()
{
  elle::signal::ScopedGuard crash_handler(
    {SIGILL, SIGABRT, SIGFPE, SIGSEGV}, write_crash_file);
  elle::signal::ScopedGuard quit_handler(
    {
      SIGINT,
      SIGTERM,
#ifndef INFINIT_WINDOWS
        SIGKILL,
#endif
    }, try_to_quit);

  ELLE_TRACE_SCOPE("%s: run application", *this);
  auto update_url = elle::os::getenv(
    "FIST_UPDATE_FILE",
    "http://download.infinit.io/windows/${architecture}/update.xml");
  this->_updater.reset(new Updater(QString::fromStdString(update_url), this));
  // Handle quit from updater.
  connect(this->_updater.get(), SIGNAL(quit_request()),
          this, SLOT(quit()));
  // Automatically realign update dialog.
  connect(this->_updater->loading_dialog(), SIGNAL(resized()),
          this, SLOT(_reposition_dialog()));
  ELLE_DEBUG("initialize login window")
    this->_initialize_login_window(true);
  ELLE_DEBUG("check for updates")
    this->_updater->check_for_updates();
  return this->_application->exec();
}

bool
Fist::_set_uniqunness_guard()
{
  ELLE_TRACE_SCOPE("%s: set uniqueness guard", *this);
  auto locked = [this] () -> bool
    {
      ELLE_TRACE("another instance is running");
      ELLE_DEBUG("clean current log")
      {
        ELLE_ASSERT(this->_state == nullptr);
        remove_current_log();
      }
      return false;
    };
  // Strategy to have one instance running:
  // The first one create a socket and try to connect to a server named
  // *lock_name*. If he received no answer that means that probably no server is
  // running. I used probably because strange behavior may happen if the
  // application previously crashed.
  // - On linux, /tmp/*lock_name* will be created and represent a kind of lock
  // but it will stay.
  // - On Windows two local servers can listen to the same pipe at the same
  // time, but any connections will go to one of the server.
  // So if your connection is accepted, the other one will write in the socket
  // a lovely message to ask you to kill yourself.
  // Otherwise, if the socket did connect to any server, that means you are
  // the only instance. So, first step is to delete the lock file (to make sure
  // to have ownership of the server name) and listen for future connection in
  // order to kick the other instances.
  // XXX: Possible race condition, if both create the server at the exact same
  // time, both socket will be rejected and they will create the servers at the
  // exact same time.
  static QString lock_name{"InfinitLocalServerLock"};
  // Local socket to check if an server (on an other instance) is running.
  ELLE_DEBUG("create local socket to look for running instance")
    this->_other_instance.reset(new QLocalSocket(this));
  // Violent but if you receive something, it's a suicide signal.
  connect(this->_other_instance.get(), SIGNAL(readyRead()),
          this, SLOT(_kicked_by_another_instance()));
  ELLE_DEBUG("try connecting to %s", lock_name)
    this->_other_instance->connectToServer(lock_name);
  if (this->_other_instance->waitForConnected(500))
  {
    if (this->_command_line)
    {
      std::string res;
      if (this->_command_line->link)
        res.append(elle::sprintf("--%s", LINK));
      else
        res.append(elle::sprintf("--%s", ADD));
      res += " ";
      res.append(elle::join(this->_command_line->files.begin(),
                            this->_command_line->files.end(), ","));
      ELLE_TRACE("write %s", res);
      this->_other_instance->write(res.c_str(), res.length() + 1);
    }
    else
    {
      this->_other_instance->write("\n", 1);
    }
    this->_other_instance->waitForBytesWritten(1000);

    // Someone accepted your connection.
    return locked();
  }
  // Remove next log (for rotation).
  if (logger)
    logger->remove_next_log();
  // Create the uniqueness server.
  QLocalServer::removeServer(lock_name);
  ELLE_DEBUG("create uniqueness server on %s", lock_name)
    this->_lock.reset(new QLocalServer(this));
  // Kick the other and get focus if a new connection is available.
  connect(this->_lock.get(), SIGNAL(newConnection()),
          this, SLOT(_new_local_socket_connection()));
  ELLE_DEBUG("listen for other instances")
    this->_lock->listen(lock_name);
  return true;
}

void
Fist::_put_lock_file()
{
  // Now that we ensured that we are the only instance running, check if our
  // lock file or our crash witness is present. If it's the case, that means
  // previous session hasn't been clean properly.
  // There are many case:
  // - crash witness is present and lock is present:
  //     This means that the previous session crashed (see list of monitored
  //     signals.)
  // - crash witness is *not* present and lock is present:
  //     The previous session hasn't been quit correctly but it's not due to a
  //     crash. There are no real consequences but it's important to get a
  //     metric on it.
  // - crash witness is present and lock is *not* present:
  //     That's weird, it shouldn't happen but the user may have remove the lock
  //     so let's consider it as a crash.
  // - None of the files are present:
  //     Do nothing, just write a lock.
  if (crash_witness.exists())
  {
    this->_previous_session_crashed = true;
#ifdef FIST_PRODUCTION_BUILD
    auto previous_log = logger ? logger->previous_log_file() : "";

    // gap_self_email could be great but the user is not logged at this stage
    // and state is not available.
    auto email = fist::settings()["Login"].get("email", "unknown").toString();

    ELLE_WARN("%s: previous session crashed. Send crash report", *this)
      gap_send_last_crash_logs(
        this->_state->state(),
        email.toStdString().c_str(),
        "",
        previous_log.c_str(),
        !this->_filelock.exists() ? "No lock was present" : "");
#else
    ELLE_WARN("Previous session crashed");
#endif
    crash_witness.setPermissions(QFile::WriteOwner);
    crash_witness.remove();
  }
  if (this->_filelock.exists())
  {
    ELLE_TRACE_SCOPE("a lock file is present (remove previous lock)");
    {
      this->_filelock.setPermissions(QFile::WriteOwner);
      this->_filelock.remove();
    }
  }
  ELLE_TRACE("set new lock")
  {
    this->_filelock.open(QIODevice::WriteOnly);
    this->_filelock.setPermissions(QFile::ReadOwner);
  }
}

void
Fist::logged_in()
{
  ELLE_TRACE_SCOPE("%s: logged in", *this);
  this->_login_window->hide();
  this->_dock.reset(new InfinitDock(*this->_state, this->_systray));
  connect(this->_dock.get(), SIGNAL(quit_request()),
          this, SLOT(quit()));
  connect(this->_dock.get(), SIGNAL(logout_request()),
          this, SLOT(logout()));
  connect(this->_updater.get(), SIGNAL(update_available(bool, QString const&)),
          this->_dock.get(), SLOT(update_available(bool, QString const&)));
  connect(this->_updater.get(), SIGNAL(download_progress(qint64, qint64)),
          this->_dock.get(), SLOT(download_progress(qint64, qint64)));
  connect(this->_updater.get(), SIGNAL(installer_ready()),
          this->_dock.get(), SLOT(download_ready()));
  connect(this->_dock.get(), SIGNAL(update_application()),
          this->_updater.get(), SLOT(run_installer()));
  connect(this, SIGNAL(p2p(QList<QUrl> const&)),
          this->_dock.get(), SLOT(p2p(QList<QUrl> const&)));
  connect(this, SIGNAL(get_a_link(QList<QUrl> const&)),
          this->_dock.get(), SLOT(get_a_link(QList<QUrl> const&)));
  this->_dock->hide();
  // Handle command line arguments.
  if (this->_command_line && !this->_command_line->files.empty())
  {
    if (this->_command_line->link)
      emit get_a_link(this->_command_line->urls());
    else
      emit p2p(this->_command_line->urls());
    this->_command_line.reset();
  }
  if (this->_updater->installer_downloaded())
  {
    this->_dock->download_ready();
  }
}

void
Fist::_update_loginwindow_updater_connections(bool connection)
{
  ELLE_TRACE_SCOPE("%s: %sconnect signal between login window and updater",
                   *this, connection ? "" : "dis");
  auto func = connection
    ? [&] (const QObject * sender, const char * signal,
    const QObject * receiver, const char * method) -> bool
    { return Self::connect(sender, signal, receiver, method); }
    : [&] (const QObject * sender, const char * signal,
    const QObject * receiver, const char * method) -> bool
      { return Self::disconnect(sender, signal, receiver, method); };
  // Notify when the login window that installer is ready to be installed.
  func(this->_updater.get(), SIGNAL(installer_ready()),
       this->_login_window.get(), SLOT(download_ready()));
  // Display version.
  func(this->_updater.get(), SIGNAL(no_update_available()),
       this->_login_window.get(), SLOT(set_version()));
  // Forward updater error to login window.
  func(this->_updater.get(), SIGNAL(update_error(QString const&, QString const&)),
       this->_login_window.get(), SLOT(set_message(QString const&, QString const&)));
  // Notify if an update is available.
  func(this->_updater.get(), SIGNAL(update_available(bool, QString const&)),
       this->_login_window.get(), SLOT(update_available(bool, QString const&)));
  // Forward updater progress to login windows.
  func(this->_updater.get(), SIGNAL(download_progress(qint64, qint64)),
       this->_login_window.get(), SLOT(download_progress(qint64, qint64)));
  // Launch the update from loginwindow.
  func(this->_login_window.get(), SIGNAL(update_application()),
       this->_updater.get(), SLOT(run_installer()));
}

void
Fist::_logging_in()
{
  ELLE_TRACE_SCOPE("%s: loging in", *this);
  this->_update_loginwindow_updater_connections(false);
}

void
Fist::_login_failed()
{
  ELLE_TRACE_SCOPE("%s: login failed", *this);
  if (this->_updater->installer_downloaded())
  {
    this->_updater->run_installer();
  }
  this->_update_loginwindow_updater_connections(true);
}

void
Fist::_new_local_socket_connection()
{
  ELLE_TRACE_SCOPE("%s: someone attempting to connect", *this);
  if (this->_dock)
  {
    ELLE_DEBUG("show dock");
    this->_dock->show_from_another_instance();
  }
  else if (this->_login_window)
  {
    ELLE_DEBUG("give login window the focus");
    this->_login_window->setFocus();
  }
  if (this->_lock->hasPendingConnections())
  {
    this->_other_instance.reset(this->_lock->nextPendingConnection());
    connect(this->_other_instance.get(), SIGNAL(readyRead()),
            this, SLOT(_read_local_socket()));
  }
}

void
Fist::_clear()
{
  ELLE_TRACE_SCOPE("%s: clear everything", *this);
  ELLE_DEBUG("clear gui")
  {
    this->_login_window.reset();
    this->_dock.reset();
  }
  this->_systray.hide();
  ELLE_DEBUG("clear state")
  {
    this->_state.reset();
  }
}

void
Fist::logout(bool kicked_out,
             bool final)
{
  ELLE_TRACE_SCOPE("%s: logout (%s%s)",
                   *this,
                   (kicked_out ? "kicked out" : "manual"),
                   (final ? " to quit app" : ""));
  if (this->_dock)
  {
    // deleteLater is used there because the initiator of the logout is a
    // component of the dock. _clear method will destroy the dock and so destroy
    // the component, causing a segfault.
    if (kicked_out)
      connect(this->_dock.get(), SIGNAL(destroyed()),
              this, SLOT(_kicked_out_reset()));
    else if (!final)
      connect(this->_dock.get(), SIGNAL(destroyed()), this, SLOT(_reset()));
    this->_dock.release()->deleteLater();
  }
  this->_clear();
  if (kicked_out)
  {
    ELLE_DEBUG("dock not created");
    this->_reset(kicked_out);
  }
}

void
Fist::_kicked_out_reset()
{
  this->_reset(true);
}

void
Fist::_reset(bool kicked_out)
{
  ELLE_TRACE_SCOPE("%s: reset app (%s)",
                   *this, (kicked_out ? "kicked out" : "manual"));
  this->_clear();
  ELLE_DEBUG("reset state")
  {
    this->_initialize_state();
  }
  ELLE_DEBUG("reset gui")
  {
    // If kicked out, credentials are kept to make reconnection frictionless.
    this->_initialize_login_window(kicked_out);
    this->_login_window->show();
    if (kicked_out)
      this->_login_window->set_message("You have been disconnected", "");
  }
}

void
Fist::_kicked_out(QString const& reason)
{
  ELLE_TRACE_SCOPE("%s: kicked out: %s", *this, reason);
  if (this->_dock)
    this->logout(true);
}

std::vector<std::string>
Fist::_extact_files_from_commandline(std::string const& message)
{
  ELLE_LOG("files '%s'", message);
  std::stringstream files(message);
  std::string temp;
  std::vector<std::string> list;
  while (std::getline(files, temp, ','))
    list.push_back(temp);
  return list;
}

void
Fist::_read_local_socket()
{
  std::string message;

  char buff[1024];
  while (true)
  {
    auto read = this->_other_instance->read(buff, sizeof(buff));
    message.append(buff, read);

    if (!this->_other_instance->bytesAvailable())
      break;
  }

  bool add = false;
  bool link = false;
  {
    ELLE_LOG("message %s", message);
    if (message.substr(0, addtag.length()) == addtag)
    {
      message.erase(0, addtag.length());
      add = true;
    }
    else if (message.substr(0, linktag.length()) == linktag)
    {
      message.erase(0, linktag.length());
      link = true;
    }
    else
    {
      if (this->_dock)
        this->_dock->show();
      else if (this->_login_window)
        this->_login_window->show();
      return;
    }

    if (link || add)
      this->_command_line.reset(
        new CommandLine(this->_extact_files_from_commandline(message),
                        link));

    // If the dock is present, just send the signal directly.
    if (this->_command_line && this->_dock)
    {
      if (this->_command_line->link)
        emit get_a_link(this->_command_line->urls());
      else
        emit p2p(this->_command_line->urls());
      this->_command_line.reset();
    }
  }
}

void
Fist::_kicked_by_another_instance()
{
  ELLE_TRACE_SCOPE("%s: kicked by an other instance", *this);
  // About to quit will destroy the state.
  this->about_to_quit();
  // If the state is not null, the log file will be busy and
  // we will not be able to delete it.
  ELLE_ASSERT(this->_state == nullptr);
  remove_current_log();
  this->quit();
}

void
Fist::print(std::ostream& stream) const
{
  stream << "Fist";
}

void
Fist::_reposition_dialog()
{
  auto* dialog = this->_updater->loading_dialog();
  auto* login = this->_login_window.get();

  dialog->move(login->x() + (login->width() - dialog->width()) / 2,
               login->y() + (login->height() - dialog->height()) / 2);
}
